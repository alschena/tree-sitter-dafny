===
Empty, no arguments, no return identifiers.
===
method A () {}
---
(source_file
    (method
      (identifier)
      (args)
      (body)))
===
More than one argument, no return identifiers.
===
method A (a: Int, b: Int) {}
---
(source_file
    (method
      (identifier)
      (args
          (identifier)
          (type)
          (identifier)
          (type))
      (body)))
===
More than one argument, more than one return identifiers.
===
method A (a: Int, b: Int) returns (c: Int, d: Int) {}
---
(source_file
    (method
      (identifier)
      (args
          (identifier)
          (type)
          (identifier)
          (type))
      (args
          (identifier)
          (type)
          (identifier)
          (type))
      (body)))
===
Simple specification
===
method A (a: Int, b: Int) returns (c: Int, d: Int)
  requires a <= b
{

}
---
(source_file
    (method
      (identifier)
      (args
          (identifier)
          (type)
          (identifier)
          (type))
      (args
          (identifier)
          (type)
          (identifier)
          (type))
      (specification
        (expression))
      (body)))
===
Simple assignment.
===
method A (a: Int, b: Int) returns (c: Int, d: Int)
  requires a <= b
{
  c := a;
}
---
(source_file
    (method
      (identifier)
      (args
          (identifier)
          (type)
          (identifier)
          (type))
      (args
          (identifier)
          (type)
          (identifier)
          (type))
      (specification
        (expression))
      (body
        (instruction
          (assignment
            (identifier)
            (expression))))))
===
Multiple parallel assignment.
===
method A (a: Int, b: Int) returns (c: Int, d: Int)
  requires a <= b
{
  c, d := a, b;
}
---
(source_file
    (method
      (identifier)
      (args
          (identifier)
          (type)
          (identifier)
          (type))
      (args
          (identifier)
          (type)
          (identifier)
          (type))
      (specification
        (expression))
      (body
        (instruction
          (assignment
            (identifier)
            (identifier)
            (expression)
            (expression))))))
===
Assignment with method call as source.
===
method A () {
  a := m ();
}
---
(source_file
    (method
      (identifier)
      (args)
      (body
        (instruction
          (assignment
            (identifier)
            (expression
              (identifier)
              (args)))))))
===
identifier declaration and assignment.
===
method A () {
  var a := b;
}
---
(source_file
    (method
      (identifier)
      (args)
      (body
        (instruction
          (variable_declaration
            (assignment
              (identifier)
              (expression)))))))
===
Empty if instruction.
===
method A () {
  if a <= b {
  } else {
  }
}
---
(source_file
    (method
      (identifier)
      (args)
      (body
        (instruction
          (instruction_conditional
            (expression)
            (body)
            (body))))))
===
Match conditional.
===
method A() {
  match a {
    case j => { b := j; }
    case k => { b := k; }
  }
}
---
(source_file
    (method
      (identifier)
      (args)
      (body
        (instruction
          (instruction_conditional
            (identifier)
            (body
              (instruction
                (assignment
                  (identifier)
                  (expression))))
            (identifier)
            (body
              (instruction
                (assignment
                  (identifier)
                  (expression)))))))))
===
Match conditional no-braces.
===
method A() {
  match a
  case Red =>
    b := a;
  case Blue =>
    b := a;
}
---
(source_file
  (method
    (identifier)
    (args)
    (body
      (instruction
        (instruction_conditional
          (identifier)
          (instruction
            (assignment
              (identifier)
              (expression)))
          (identifier)
          (instruction
            (assignment
              (identifier)
              (expression))))))))
===
While loop
===
method A() {
  while a < b {}
}
---
(source_file
    (method
      (identifier)
      (args)
      (body
        (instruction
          (instruction_loop
            (expression)
            (body))))))
===
Assert statement
===
method A() {
  assert a < b;
}
---
(source_file
    (method
      (identifier)
      (args)
      (body
        (instruction
          (instruction_spec
            (expression))))))
===
Assume statement
===
method A() {
  assume a < b;
}
---
(source_file
    (method
      (identifier)
      (args)
      (body
        (instruction
          (instruction_spec
            (expression))))))
===
yield statement.
===
method A() {
  yield a, b;
}
---
(source_file
    (method
      (identifier)
      (args)
      (body
        (instruction
          (yield
            (expression)
            (expression))))))
===
Return statement.
===
method A() {
  return a, b;
}
---
(source_file
    (method
      (identifier)
      (args)
      (body
        (instruction
          (return
            (expression)
            (expression))))))
===
Forall specification.
===
method A()
  forall a :: i < j
{}
---
(source_file
    (method
      (identifier)
      (args)
      (specification
        (forall_spec
          (expression)))
      (body)))
===
Forall instruction.
===
method A()
{
  forall e <- s {}
}
---
(source_file
    (method
      (identifier)
      (args)
      (body
        (instruction
          (instruction_forall
            (body))))))
===
Label without parentheses.
===
method A()
{
  label L:
}
---
(source_file
    (method
      (identifier)
      (args)
      (body
        (instruction
          (label
            (identifier))))))
===
Label parenthesised.
===
method A()
{
  label L: {}
}
---
(source_file
    (method
      (identifier)
      (args)
      (body
        (instruction
          (label
            (identifier)
            (body))))))
===
For loop using "to".
===
method A()
{
  for i := a to b {
  }
}
---
(source_file
  (method
    (identifier)
    (args)
    (body
      (instruction
        (instruction_loop
          (assignment
            (identifier)
            (expression))
          (expression)
          (body))))))
===
For loop using "downto".
===
method A()
{
  for i := a downto b {
  }
}
---
(source_file
  (method
    (identifier)
    (args)
    (body
      (instruction
        (instruction_loop
          (assignment
            (identifier)
            (expression))
          (expression)
          (body))))))
===
For loop with integer assignment.
===
method A()
{
  for i := 5 downto b {
  }
}
---
(source_file
  (method
    (identifier)
    (args)
    (body
      (instruction
        (instruction_loop
          (assignment
            (identifier)
            (expression))
          (expression)
          (body))))))
===
Lambda untyped
===
method A() {
  var a := i => i*i;
}
---
(source_file
  (method
    (identifier)
    (args)
    (body
      (instruction
        (variable_declaration
          (assignment
            (identifier)
            (expression
              (lambda
                (identifier)
                (expression)))))))))
===
Lambda typed.
===
method A() {
  var a := i: int => i*i;
}
---
(source_file
  (method
    (identifier)
    (args)
    (body
      (instruction
        (variable_declaration
          (assignment
            (identifier)
            (expression
              (lambda
                (identifier)
                (type)
                (expression)))))))))
===
Lambda with expression in braces.
===
method A() {
  var a := i: int => {i*i};
}
---
(source_file
  (method
    (identifier)
    (args)
    (body
      (instruction
        (variable_declaration
          (assignment
            (identifier)
            (expression
              (lambda
                (identifier)
                (type)
                (expression)))))))))
===
Allocation.
===
method A() {
  var a := new MyClass;
}
---
(source_file
  (method
    (identifier)
    (args)
    (body
      (instruction
        (variable_declaration
          (assignment
            (identifier)
            (expression
              (allocation
                (expression)))))))))



